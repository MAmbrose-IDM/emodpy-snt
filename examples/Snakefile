import os
import pathlib
from sys import platform
from pathlib import Path
from tempfile import mkstemp
from shutil import move, copymode
from os import fdopen, remove
from update_lines import update_parameters_in_file

# PLEASE NOTE: This file cannot run on multiple cores, the sharing of the update_parameters_in_file function
# between rules creates catastrophic issues

dirs = os.listdir()
input_files = list()

config['python_version'] = 0


def get_command(script="run_simulations.py", python_version: str = None):
    # using pushd (i.e. cd into directory) to use script location as base dir, otherwise relative
    # paths in script use snakemake dir as base
    if python_version:
        command = python_version + " " + script
    elif platform == "linux":
        command = "python3 " + script
    elif platform == "win32":
        command = "python " + script
    else:
        print("Unknown OS")
        raise Exception
    return command


# doing it manually because... too complicated otherwise? re
expected_outputs = [r"monique/calibration/baseline_calibration/01_serialize_transmission_sweep/experiment_id.txt",
                    r"monique/calibration/baseline_calibration/02_run_transmission_sweep/experiment_id.txt",
                    r"monthly_U5_PfPR.csv",
                    r"../data/example_files/simulation_output/calibration/baseline_calibration/LL_allxLH_each_admin_run/CC_run3.csv",
                    r"../data/example_files/simulation_inputs/larval_habitats/monthly_habitats_1.csv",
                    r"monique/calibration/seasonality_calibration/01_burnin_for_seasonalityCalib/experiment_id.txt",
                    r"monique/calibration/seasonality_calibration/02_seasonality_calibration/experiment_id.txt",
                    r"monique/run_to_present/experiment_id.txt",
                    r"monique/run_future_scenarios/experiment_id.txt",
                    r"ben/example/run_1960-2004/experiment_id.txt",
                    r"ben/example/run_2005-2022/experiment_id.txt"]

rule all:
    input: expected_outputs
    default_target: True

# # monique/calibration/baseline_calibration/ run
baseline_calibration = r"monique/calibration/baseline_calibration/"

rule serialize_transmission_sweep:
    input: baseline_calibration + r"01_serialize_transmission_sweep/params.py",
           baseline_calibration + r"01_serialize_transmission_sweep/manifest.py"
    output:
        touch(baseline_calibration + r"01_serialize_transmission_sweep/experiment_id.txt")
    run:
        update_parameters_in_file(input[0],{"years = 30": f"years = 10\n",
                                            "num_seeds = ": "num_seeds = 1\n"})
        update_parameters_in_file(input[1],{"USER_PATH = ": f"USER_PATH = r'../data'\n",
                                            "sif_id = None": "sif_id = 'dtk_sif.id'\n"})
        shell(get_command(script=baseline_calibration + r"01_serialize_transmission_sweep/run_simulations.py",
            python_version=config['python_version']))

rule run_transmission_sweep:
    input: baseline_calibration + r"01_serialize_transmission_sweep/experiment_id.txt",
           baseline_calibration + r"02_run_transmission_sweep/params.py",
           baseline_calibration + r"02_run_transmission_sweep/manifest.py",
    output: touch(baseline_calibration + r"02_run_transmission_sweep/experiment_id.txt")
    run:
        with open(input[0]) as exp_id_file:
            burnin_id = exp_id_file.read()
        update_parameters_in_file(input[1],{"burnin_id = =": f"burnin_id = '{burnin_id}'\n",
                                            "num_seeds = ": "num_seeds = 1\n",
                                            "num_burnin_seeds = ": "num_burnin_seeds = 1\n"})
        update_parameters_in_file(input[2],{"USER_PATH = ": f"USER_PATH = r'../data'\n",
                                            "sif_id = None": "sif_id = 'dtk_sif.id'\n"})
        shell(get_command(script=baseline_calibration + r"02_run_transmission_sweep/run_simulations.py",
            python_version=config['python_version']))

rule analyze_ssmt_monthy_U5_PfPR:
    input: baseline_calibration + r"02_run_transmission_sweep/experiment_id.txt",
           baseline_calibration + r"03_analyze_ssmt_monthly_U5_PfPR.py"
    output: touch(r"monthly_U5_PfPR.csv")
    run:
        with open(input[0]) as exp_id_file:
            burnin_id = exp_id_file.read()
            update_parameters_in_file(input[1],
                {"experiments = ": f"experiments = {{'PfPR_sweep_main_example': '{burnin_id}'}}\n"})
        shell(get_command(script=baseline_calibration + r"03_analyze_ssmt_monthly_U5_PfPR.py",
            python_version=config['python_version']))

rule find_best_xLH_fits:
    output:
        touch(r"../data/example_files/simulation_output/calibration/baseline_calibration/LL_allxLH_each_admin_run/CC_run3.csv")
    run:
        shell(get_command(script=r"monique/calibration/baseline_calibration/04_find_best_xLH_fits.py",
            python_version=config['python_version']))


# monique/calibration/baseline_calibration/ run
seasonality_cal = r"monique/calibration/seasonality_calibration/"

rule burnin_for_seasonalityCalib:
    input: seasonality_cal + r"01_burnin_for_seasonalityCalib/params.py",
           seasonality_cal + r"01_burnin_for_seasonalityCalib/manifest.py"
    output:
        touch(seasonality_cal + r"01_burnin_for_seasonalityCalib/experiment_id.txt")
    run:
        update_parameters_in_file(input[0],{"years = 20": f"years = 5\n"})
        update_parameters_in_file(input[1],{"USER_PATH = ": f"USER_PATH = r'../data'\n",
                                            "sif_id = None": "sif_id = 'dtk_sif.id'\n"})
        shell(get_command(script=seasonality_cal + r"01_burnin_for_seasonalityCalib/run_simulations.py",
            python_version=config['python_version']))


rule seasonality_calibration:
    input: seasonality_cal + r"01_burnin_for_seasonalityCalib/experiment_id.txt",
           seasonality_cal + r"02_seasonality_calibration/params.py",
           seasonality_cal + r"02_seasonality_calibration/manifest.py"
    output:
        touch(seasonality_cal + r"02_seasonality_calibration/experiment_id.txt")
    run:
        with open(input[0]) as exp_id_file:
            burnin_id = exp_id_file.read()
        update_parameters_in_file(input[1],{"burnin_ids = {{": f"burnin_ids = {{'AA': '{burnin_id}'}}\n"})
        update_parameters_in_file(input[2],{"USER_PATH = ": f"USER_PATH = r'../data'\n",
                                            "sif_id = None": "sif_id = 'dtk_sif.id'\n"})
        shell(get_command(script=r"monique/calibration/seasonality_calibration/02_seasonality_calibration/run_calibration.py",
            python_version=config['python_version']))

rule save_best_seasonality_fit:
    input: seasonality_cal + r"/03_save_best_seasonality_fit.py"
    output:
        touch(r"../data/example_files/simulation_inputs/larval_habitats/monthly_habitats_1.csv")
    run:
        update_parameters_in_file(input[0],{"USER_PATH = ": f"USER_PATH = r'../data'\n"})
        shell(get_command(script=seasonality_cal + r"03_save_best_seasonality_fit.py",
            python_version=config['python_version']))

# run to present
run_to_pre = r"monique/run_to_present/"

rule run_to_present:
    input: baseline_calibration + r"01_serialize_transmission_sweep/experiment_id.txt",
           run_to_pre + r"params.py",run_to_pre + r"manifest.py"
    output: touch(run_to_pre + r"experiment_id.txt")
    run:
        with open(input[0]) as exp_id_file:
            burnin_id = exp_id_file.read()
        update_parameters_in_file(input[1],{"burnin_id = ": f"burnin_id = '{burnin_id}'\n",
                                            "num_seeds = ": "num_seeds = 1\n",
                                            "num_burnin_seeds = ": "num_burnin_seeds = 1\n",
                                            "ser_date = 30 * 365": "ser_date = 10 * 365\n"})
        update_parameters_in_file(input[2],{"USER_PATH = ": f"USER_PATH = r'../data'\n",
                                            "sif_id = None": "sif_id = 'dtk_sif.id'\n"})
        shell(get_command(script=run_to_pre + r"run_simulations.py",
            python_version=config['python_version']))

#
# run to future
run_to_futu = r"monique/run_future_scenarios/"

rule run_to_future:
    input: run_to_pre + r"experiment_id.txt",
           run_to_futu + r"params.py",run_to_futu + r"manifest.py"
    output: touch(run_to_futu + r"experiment_id.txt")
    run:
        with open(input[0]) as exp_id_file:
            burnin_id = exp_id_file.read()
        update_parameters_in_file(input[1],{"burnin_id = ": f"burnin_id = '{burnin_id}'\n",
                                            "num_seeds = ": "num_seeds = 1\n",
                                            "num_burnin_seeds = ": "num_burnin_seeds = 1\n",
                                            "num_burnin_seeds_calib = 5": "num_burnin_seeds_calib = 1"})
        update_parameters_in_file(input[2],{"USER_PATH = ": f"USER_PATH = r'../data'\n",
                                            "sif_id = None": "sif_id = 'dtk_sif.id'\n"})
        shell(get_command(script=run_to_futu + r"run_simulations.py",
            python_version=config['python_version']))

# run 1960 to 2004
run_1960_to_2004 = r"ben/example/run_1960-2004/"

rule run_1960_2004:
    input: run_1960_to_2004 + r"params.py",run_1960_to_2004 + r"manifest.py"
    output: touch(run_1960_to_2004 + r"experiment_id.txt")
    run:
        update_parameters_in_file(input[0],{"num_seeds = ": "num_seeds = 1 \n",
                                            "iopath = ": "iopath = 'ben/IO' \n",
                                            "years = ": "years = 5 \n"})
        update_parameters_in_file(input[1],{"USER_PATH = ": f"USER_PATH = r'../data'\n",
                                            "sif_path = ": "sif_path = 'dtk_sif.id'\n"})
        shell(get_command(script=run_1960_to_2004 + r"run_simulations.py",
            python_version=config['python_version']))

run_2005_to_2022 = r"ben/example/run_2005-2022/"

rule run_2005_2022:
    input: run_1960_to_2004 + r"experiment_id.txt",
           run_2005_to_2022 + r"params.py",run_2005_to_2022 + r"manifest.py"
    output: touch(run_2005_to_2022 + r"experiment_id.txt")
    run:
        with open(input[0]) as exp_id_file:
            burnin_id = exp_id_file.read()
        update_parameters_in_file(input[1],{"burnin_id = ": f"burnin_id = '{burnin_id}'\n",
                                            "iopath = ": "iopath = 'ben/IO' \n"})
        update_parameters_in_file(input[2],{"BEN_DIR = ": f"BEN_DIR = r'ben'\n",
                                            "sif_path = ": "sif_path = 'dtk_sif.id'\n"})
        shell(get_command(script=run_2005_to_2022 + r"run_simulations.py",
            python_version=config['python_version']))


rule clean_output:
    run:
        for file in expected_outputs:
            os.remove(file)
